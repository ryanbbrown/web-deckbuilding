---
description:
globs:
alwaysApply: false
---
When implementing a new feature, complete the following steps:

## 0. Planning
Based on the feature description from the user, read the relevant code files and create a specific + detailed to-do list. It should be based on the tasks listed below, with feature-specific detail added for clarity. Keep in mind that not all features will need all of the sections below; some may be front-end only or store + front-end only, for example.

After creating the to-do list, wait for the user to review and confirm before proceeding with the edits.

## 1. Service
- **Service Update:** If new business logic is required, add it to the relevant service file in `src/features/[feature_name]/services`.
- **Service Tests:** Update the service test file in `src/features/[feature_name]/test` to test the new functionality, and modify any existing tests as needed. 
- **Validation:** Run the command `pnpm test --run` to ensure that all tests are passing.

## 2. Store
- **Store Update:** The Zustand stores act as the public API for the front-end to call. If there's new business logic, add a wrapper to the relevant store file in `src/store`.
- **Store Tests:** Update the store test file in `src/store` to reflect the new functionality.
- **Validation:** Run the command `pnpm test --run` to ensure that all tests are passing.

## 3. Front-End
- **Front-End Update:** Add a new component or edit existing components in `src/components` as needed.
- **Front-End Tests:** Update the component test files in the `__tests__` folder with new tests and/or modifications to existing tests.
- **Validation:** Run the command `pnpm test --run` to ensure that all tests are passing.
- **Browser Testing:** Use the Browser MCP to click on the relevant elements and ensure that the feature works end-to-end as expected. You can assume that the browser is already connected to a tab with the dev server running on localhost:5173, so your first step should be to take a screenshot and understand the current state.